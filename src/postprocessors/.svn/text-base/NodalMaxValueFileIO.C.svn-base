/****************************************************************/
/*               DO NOT MODIFY THIS HEADER                      */
/* MOOSE - Multiphysics Object Oriented Simulation Environment  */
/*                                                              */
/*           (c) 2010 Battelle Energy Alliance, LLC             */
/*                   ALL RIGHTS RESERVED                        */
/*                                                              */
/*          Prepared by Battelle Energy Alliance, LLC           */
/*            Under Contract No. DE-AC07-05ID14517              */
/*            With the U. S. Department of Energy               */
/*                                                              */
/*            See COPYRIGHT for full restrictions               */
/****************************************************************/

#include "HognoseOxideThickness.h"

#include <algorithm>
#include <limits>
#include <iostream>
#include <fstream>
#include <string>

template<>
InputParameters validParams<HognoseOxideThickness>()
{
  InputParameters params = validParams<NodalVariablePostprocessor>();
  return params;
}

HognoseOxideThickness::HognoseOxideThickness(const std::string & name, InputParameters parameters) :
  NodalVariablePostprocessor(name, parameters)
{}

void
HognoseOxideThickness::initialize()
{
  _value = -std::numeric_limits<Real>::max();
}

void
HognoseOxideThickness::execute()
{
  _value = std::max(_value, _u[_qp]);
}

Real
HognoseOxideThickness::getValue()
{
  gatherMax(_value);
  std::ofstream myfile ("PeakCladTemp.out");
  if (myfile.is_open())
  {
    myfile << "PeakCladTemp = " << _value << std::endl;
    myfile.close();
  }
  else std::cout << "Unable to open file";

  return _value;
}

void
HognoseOxideThickness::threadJoin(const UserObject & y)
{
  const HognoseOxideThickness & pps = static_cast<const HognoseOxideThickness &>(y);
  _value = std::max(_value, pps._value);
}

